{"version":3,"sources":["atoms.ts","theme.ts","components/CreateTodo.tsx","components/Todo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Categories","darkTheme","bgColor","textColor","accentColor","cardBgColor","savedCategories","localStorage","getItem","parsedCategories","JSON","parse","savedTodos","parsedTodos","atom","key","default","todoState","categoryState","TO_DO","todoSelector","selector","get","todos","category","filter","todo","customCategory","CreateTodo","useForm","register","handleSubmit","setValue","useRecoilState","setTodos","useRecoilValue","onSubmit","prev","text","id","Date","now","setItem","stringify","required","placeholder","Todo","useSetRecoilState","onClickTodoBtn","event","name","currentTarget","prevTodos","index","findIndex","newTodo","slice","customCategories","DOING","onClick","DONE","map","item","TodoList","setCategory","setCustomCategories","newCategory","value","onInput","cate","GlobalStyle","createGlobalStyle","props","theme","App","queryCilent","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.49f9b33d.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nconst savedCategories = localStorage.getItem(\"category\");\r\nconst parsedCategories = savedCategories ? JSON.parse(savedCategories) : [];\r\n\r\nconst savedTodos = localStorage.getItem(\"todos\");\r\nconst parsedTodos = savedTodos ? JSON.parse(savedTodos) : [];\r\n\r\nexport interface ITodo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const isDarkAtom = atom({\r\n  key: \"isDark\",\r\n  default: true,\r\n});\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport const todoState = atom<ITodo[]>({\r\n  key: \"todoState\",\r\n  default: parsedTodos,\r\n});\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"categoryState\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const todoSelector = selector({\r\n  key: \"todoSelector\",\r\n  get: ({ get }) => {\r\n    const todos = get(todoState);\r\n    const category = get(categoryState);\r\n    return todos.filter((todo) => todo.category === category);\r\n  },\r\n});\r\n\r\nexport const customCategory = atom<string[]>({\r\n  key: \"customCategory\",\r\n  default: parsedCategories,\r\n});\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"rgba(0, 0, 0, 0.5)\",\r\n};\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, todoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  todo: string;\r\n}\r\n\r\nconst CreateTodo = () => {\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [todos, setTodos] = useRecoilState(todoState);\r\n  const category = useRecoilValue(categoryState);\r\n  function onSubmit({ todo }: IForm) {\r\n    setTodos((prev) => [...prev, { text: todo, id: Date.now(), category }]);\r\n    setValue(\"todo\", \"\");\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <input\r\n        {...register(\"todo\", {\r\n          required: \"Please write a Todo.\",\r\n        })}\r\n        placeholder=\"Todo\"\r\n      />\r\n      <button>New Todo</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreateTodo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, customCategory, ITodo, todoState } from \"../atoms\";\r\n\r\nconst Todo = ({ text, category, id }: ITodo) => {\r\n  const setTodos = useSetRecoilState(todoState);\r\n  function onClickTodoBtn(event: React.MouseEvent<HTMLButtonElement>) {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n\r\n    setTodos((prevTodos) => {\r\n      const index = prevTodos.findIndex((todo) => todo.id === id);\r\n      const newTodo = { text, id, category: name as any };\r\n      return [\r\n        ...prevTodos.slice(0, index),\r\n        newTodo,\r\n        ...prevTodos.slice(index + 1),\r\n      ];\r\n    });\r\n  }\r\n\r\n  const customCategories = useRecoilValue(customCategory);\r\n\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClickTodoBtn}>\r\n          DOING\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClickTodoBtn}>\r\n          DONE\r\n        </button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClickTodoBtn}>\r\n          TO_DO\r\n        </button>\r\n      )}\r\n      {customCategories.map(\r\n        (item) =>\r\n          category !== item && (\r\n            <button key={item} name={item} onClick={onClickTodoBtn}>\r\n              {item}\r\n            </button>\r\n          )\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  Categories,\r\n  categoryState,\r\n  customCategory,\r\n  todoSelector,\r\n} from \"../atoms\";\r\nimport CreateTodo from \"./CreateTodo\";\r\nimport Todo from \"./Todo\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\ninterface INewCategory {\r\n  newCategory: string;\r\n}\r\n\r\nconst TodoList = () => {\r\n  const todos = useRecoilValue(todoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const [customCategories, setCustomCategories] =\r\n    useRecoilState(customCategory);\r\n  function onInput(event: React.FormEvent<HTMLSelectElement>) {\r\n    const {\r\n      currentTarget: { value },\r\n    } = event;\r\n    setCategory(value as any);\r\n  }\r\n\r\n  const { register, handleSubmit, setValue } = useForm();\r\n  function onNewCategory({ newCategory }: INewCategory) {\r\n    setCustomCategories((prev) => [...prev, newCategory]);\r\n    setValue(\"newCategory\", \"\");\r\n    localStorage.setItem(\"category\", JSON.stringify(customCategories));\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>To Do</h1>\r\n      <hr />\r\n      <form onSubmit={handleSubmit(onNewCategory)}>\r\n        <input {...register(\"newCategory\", { required: \"Required\" })} />\r\n        <button>Create New Category</button>\r\n      </form>\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>TO_DO</option>\r\n        <option value={Categories.DOING}>DOING</option>\r\n        <option value={Categories.DONE}>DONE</option>\r\n        {customCategories.map((cate) => (\r\n          <option key={cate} value={cate}>\r\n            {cate}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <CreateTodo />\r\n      <ul>\r\n        {todos?.map((todo) => (\r\n          <Todo key={todo.id} {...todo} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\nimport TodoList from \"./components/TodoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;500;800&family=Rubik:wght@500&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n* {\n  box-sizing: border-box;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <TodoList />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\n\nconst queryCilent = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryCilent}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}